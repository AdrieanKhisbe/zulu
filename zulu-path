#!/usr/bin/env zsh

###
# Output usage information
###
function _zulu_path_usage() {
  echo $(color yellow "Usage:")
  echo "  zulu path <context> <dir>"
  echo
  echo $(color yellow "Context:")
  echo "  add <dir>     Add a directory to \$PATH"
  echo "  remove <dir>  Remove a directory from \$PATH"
}

###
# Check the existence of a directory when passed as an argument,
# and convert relative paths to absolute
###
function _zulu_path_parse() {
  local dir="$1" check_existing="$2"

  if [[ -d "$PWD/$dir" ]]; then
    # If the directory exists in the current working directory
    # convert the relative path to absolute
    echo "$PWD/$dir"
  elif [[ -d "$dir" ]]; then
    # If the directory exists as an absolute path, we can use it directly
    echo "$dir"
  elif [[ "$check_existing" != "false" ]]; then
    # The directory could not be found. Print an error message and return
    echo $(color red "Directory '$dir' cannot be found. You must specify an absolute or relative path to an existing directory")
    echo
    _zulu_path_usage
    return 1
  fi
}

###
# Add a directory to $PATH
###
function _zulu_path_add() {
  local paths=($(cat $pathfile))
  local -a items

  # Check that each of the passed directories exist, and convert relative
  # paths to absolute
  for dir in "$@"; do
    dir=$(_zulu_path_parse "$dir")

    # If parsing returned with an error, output the error and return
    if [[ ! $? -eq 0 ]]; then
      echo $dir
      return 1
    fi

    # Add the directory to the array of items
    items+="$dir"
  done

  # Loop through each of the existing paths and add those to the array as well
  for p in "$paths[@]"; do
    items+="$p"
  done

  # Store the new paths in the pathfile, and override $PATH
  _zulu_path_store
  _zulu_path_reset
}

###
# Remove a directory from $PATH
###
function _zulu_path_remove() {
  local paths=($(cat $pathfile))
  local -a items

  # Check that each of the passed directories exist, and convert relative
  # paths to absolute
  for dir in "$@"; do
    dir=$(_zulu_path_parse "$dir" "false")

    # If parsing returned with an error, output the error and return
    if [[ ! $? -eq 0 ]]; then
      echo $dir
      return 1
    fi

    # Loop through each of the paths, and if they are *not* an exact match,
    # we want to keep them
    for p in "$paths[@]"; do
      if [[ "$p" != "$dir" ]]; then
        items+="$p"
      fi
    done
  done

  # Store the new paths in the pathfile, and override $PATH
  _zulu_path_store
  _zulu_path_reset
}

###
# Store an array of paths in the pathfile
###
function _zulu_path_store() {
  local separator out

  # Check that we have all the parameters we need. This will only happen if
  # _zulu_path_store is executed internally.
  if [[ "$items" = "" || "$pathfile" = "" ]]; then
    echo 'Missing parameters. Was _zulu_path_store called from within the add or remove functions?'
    return 1
  fi

  # Separate the array by newlines, and print the contents to the pathfile
  separator=$'\n'
  local IFS="$separator"; out="${items[*]/#/${separator}}"
  echo ${out:${#separator}} >! $pathfile
}

###
# Override the $PATH variable with the current contents of the pathfile
###
function _zulu_path_reset() {
  local separator out paths=($(cat $pathfile))

  # Separate the array by colons, and store the contents in $PATH
  separator=":"
  local IFS="$separator"; out="${paths[*]/#/${separator}}"
  export PATH="${out:${#separator}}"
}

###
# Zulu command to handle path manipulation
###
function _zulu_path() {
  local ctx base pathfile

  # Parse options
  zparseopts -D h=help -help=help

  # Output help and return if requested
  if [[ $help ]]; then
    _zulu_path_usage
    return
  fi

  # Set up some variables
  base=${ZULU_DIR:-"$HOME/.config/zulu"}
  pathfile="${base}/config/path"

  # If no context is passed, output the contents of the pathfile
  if [[ "$1" = "" ]]; then
    cat "$pathfile"
    return
  fi

  # Get the context
  ctx="$1"

  # Call the relevant function
  _zulu_path_${ctx} "${(@)@:2}"
}
